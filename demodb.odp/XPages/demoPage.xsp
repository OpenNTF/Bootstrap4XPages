<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" xmlns:xc="http://www.ibm.com/xsp/custom">
	<xp:this.pageTitle><![CDATA[#{javascript:database.getTitle() + " - Demo page"}]]></xp:this.pageTitle>

	
	<xp:this.beforePageLoad><![CDATA[#{javascript://dBar.info("running the beforePageLoad event of the demo page", "beforePageLoad");}]]></xp:this.beforePageLoad>

	<xp:this.resources>
		<xp:script src="/demoPage.jss" clientSide="false"></xp:script>
		<xp:dojoModule name="dijit.form.Button"></xp:dojoModule>
	</xp:this.resources>
	
	<style type="text/css">
	h2 {
		margin-bottom:10px;
	}
	h3 {
		margin-bottom: 5px;
		text-decoration: underline;
	}
	p {
		margin-top:10px;
		margin-bottom:10px;
	}
	.shadowed {
	  position: relative;
	  width: 700px;
	  background: #ddd;
	  -moz-border-radius: 5px;
	  border-radius: 5px;
	  padding: 2em 1.5em;
	  margin: 60px auto;
	 }
	.shadowed:before, .shadowed:after {
	  z-index: -1; 
	  position: absolute; 
	  content: "";
	  bottom: 15px;
	  left: 10px;
	  width: 50%; 
	  top: 80%;
	  max-width:600px;  
	  background: rgba(0, 0, 0, 0.7); 
	  -webkit-box-shadow: 0 15px 10px rgba(0,0,0, 0.7);   
	  -moz-box-shadow: 0 15px 10px rgba(0, 0, 0, 0.7);
	  box-shadow: 0 15px 10px rgba(0, 0, 0, 0.7);
	  -webkit-transform: rotate(-3deg);    
	  -moz-transform: rotate(-3deg);   
	  -o-transform: rotate(-3deg);
	  -ms-transform: rotate(-3deg);
	  transform: rotate(-3deg);
	}
	.shadowed:after 	{
	  -webkit-transform: rotate(3deg);
	  -moz-transform: rotate(3deg);
	  -o-transform: rotate(3deg);
	  -ms-transform: rotate(3deg);
	  transform: rotate(3deg);
	  right: 10px;
	  left: auto;
	}	
	p {
	
	}
</style>
	
	<xp:div styleClass="shadowed" id="pnlSamples">
		<xp:this.loaded><![CDATA[${javascript://load the contents of the sample page only if the debug toolbar is available
typeof dBar != "undefined";}]]></xp:this.loaded>
	
		<h2>XPage Debug Toolbar demo page</h2>
		
		<xp:button value="Add sample data to scope variables" id="btnAddSampleData" dojoType="dijit.form.Button">
			<xp:eventHandler event="onclick" submit="true" refreshMode="full">
				<xp:this.action><![CDATA[#{javascript://add some variables to the various scopes to check
//if they are shown in the debug toolbar
setDemoScopeVariables();
}]]></xp:this.action>
			</xp:eventHandler>
		</xp:button>
		
		<div style="margin: 15px 0">
			<h3>Logging from SSJS</h3>

			Add a message:&#160;
			<xp:button value="debug" id="btnDebugMsg" dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.debug("debug message using SSJS from a button");}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
			<xp:button value="info" id="btnInfoMsg" dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.info("info message using SSJS from a button");}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
			<xp:button value="warning" id="btnWarnMsg" dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.warn("warning message using SSJS from a button");}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
			
			<xp:button id="btnErrorMsg" dojoType="dijit.form.Button" value="error">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:try {
	
		var doc:NotesDocument = null;
		var id = doc.getUniversalID();		//won't work since doc == null
		
	} catch (e) {
	
		dBar.error("an error occurred");
		dBar.error(e);
	
	}
		
	}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
			
			<xp:br></xp:br>
			<xp:button value="dump an object (sessionScope)" id="button10"
				dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.dump(sessionScope);}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
	
			<xp:button value="dump an object (array)" id="button13"
				dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.dump( [1, 2, 34] );}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
		</div>
		
		<div style="margin: 15px 0">
			<h3>Logging from Java</h3>
		
			<xp:text escape="true" id="computedField2" style="color:red" value="Demo disabled - Java demo bean not found">
				<xp:this.loaded><![CDATA[${javascript:typeof demoBean == "undefined";}]]></xp:this.loaded>
			</xp:text>
	
			<xp:div>
				<xp:this.loaded><![CDATA[${javascript:typeof demoBean != "undefined";}]]></xp:this.loaded>
		
				<p>
					<xp:button value="call function in bean" id="button4"
						dojoType="dijit.form.Button">
						<xp:eventHandler event="onclick" submit="true" refreshMode="full">
							<xp:this.action><![CDATA[#{javascript:demoBean.someMethod();}]]></xp:this.action>
						</xp:eventHandler>
					</xp:button>
					<xp:button value="call another function in a bean"
						id="button5" dojoType="dijit.form.Button">
						<xp:eventHandler event="onclick" submit="true" refreshMode="full">
							<xp:this.action><![CDATA[#{javascript:demoBean.otherMethod();}]]></xp:this.action>
						</xp:eventHandler>
					</xp:button>
					<xp:button value="throw an error" id="button6"
						dojoType="dijit.form.Button">
						<xp:eventHandler event="onclick" submit="true" refreshMode="full">
							<xp:this.action><![CDATA[#{javascript:demoBean.faultyMethod();}]]></xp:this.action>
						</xp:eventHandler>
					</xp:button>
				</p>
			</xp:div>
		</div>

		<div style="margin: 15px 0">
			<h3>Logging on (SSJS) events</h3>

			<p>
				Change me and check for messages:&#160;
				<xp:comboBox id="comboBox1">
					<xp:selectItem itemLabel="item 1" itemValue="item1"></xp:selectItem>
					<xp:selectItem itemLabel="item 2" itemValue="item2"></xp:selectItem>
					<xp:eventHandler event="onchange" submit="true"
						refreshMode="full">
						<xp:this.action><![CDATA[#{javascript:dBar.info("combo changed, new value:" + this.getParent().getValue());}]]></xp:this.action>
					</xp:eventHandler>
				</xp:comboBox>
				<br />
				<xp:span style="font-style:italic">
					(you need to refresh the messages panel to see the
					changes)
				</xp:span>
			</p>
		</div>
		
		<div style="margin: 15px 0">
			<h3>Logging to an external (OpenLog) database</h3>
			
			<p>
				The "environment &#38; Java" tab shows the settings for external logging. It is important to note that external logging will continue also if the toolbar is hidden.
			</p>
			<p>
				Try hiding the toolbar using the button below. This does the same as the "remove" link in the toolbar.
			</p>
			
			<xp:button value="Hide the toolbar" id="button1" dojoType="dijit.form.Button" rendered="#{dBar.toolbarVisible}">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.setToolbarVisible(false);}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>

			<xp:button value="Show the toolbar" id="btnShowToolbar" dojoType="dijit.form.Button" rendered="#{!dBar.toolbarVisible}">
				<xp:eventHandler event="onclick" submit="true" refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.setToolbarVisible(true);}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>

		</div>
			
		<div style="margin: 15px 0">
			<h3>Custom Error page</h3>
		
			Test the Debug Toolbar&#160;error page: <xp:button value="Test 1" id="buttonTestError1"
				dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true"
					refreshMode="complete">
					<xp:this.action><![CDATA[#{javascript://this code will throw an error (since doc is undefined)
print( doc.getUniversalID() );}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
			<xp:button value="Test 2" id="buttonTestError2"
				dojoType="dijit.form.Button">
				<xp:eventHandler event="onclick" submit="true"
					refreshMode="complete">
					<xp:this.action><![CDATA[#{javascript://this code will throw an error (view Help doesn't exist)
var vw = database.getView("Help");
doc = vw.getDocumentByKey("User Help");}]]></xp:this.action>
				</xp:eventHandler>
			</xp:button>
			<p>
				This requires the option&#160;<strong>&quot;Display XPage runtime error page&quot;</strong>&#160;(found in the Application Properties, XPages tab) to be unchecked and the 
				&#160;<strong>debugToolbarErrorPage</strong>&#160;to be selected as the error page.
			</p>
		</div>
		
		<div style="margin: 15px 0">
			<h3>Color</h3>
		
			Change the toolbar's&#160;color: &#160;
			<xp:link escape="true" text="red" id="link1">
				<xp:eventHandler event="onclick" submit="true"
					refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.setColor("red");}]]></xp:this.action>
				</xp:eventHandler>
			</xp:link>
			&#160;
			<xp:link escape="true" text="blue" id="link2">
				<xp:eventHandler event="onclick" submit="true"
					refreshMode="full">
					<xp:this.action><![CDATA[#{javascript:dBar.setColor("blue");}]]></xp:this.action>
				</xp:eventHandler>
			</xp:link>
			
		</div>
		
	</xp:div>

	<xp:div id="pnlDocumentation" style="margin: 10px;">
		<h2>How to install and use the XPage Debug Toolbar</h2>
		
		<p>
		1. Copy the following design elements to your application:
		<ul>
		<li><b>ccDebugToolbar</b>&#160;(custom control)</li>
		<li><b>xpDebugToolbar</b>&#160;(SSJS library)</li>
		<li><b>debugToolbarConsole</b>&#160;(XPage, optional: only if you want to be able to use the detached messages console)</li>
		<li><b>debugToolbarErrorPage</b>&#160;(XPage, optional: only if you want to use the debug toolbar's error page)</li>
		<li><b>eu.linqed.debugtoolbar.DebugToolbar</b>&#160;(Java class)</li>
		<li><b>eu.linqed.debugtoolbar.Message</b>&#160;(Java class)</li>
		</ul>
		The Debug Toolbar doesn't have other requirements (e.g. Extension Library) and can also be used in XPages in the Notes Client (XPiNC).</p>
		
		<p>
		2. Define the required&#160;<b>dBar</b>&#160;managed bean: 
		<ul>
		<li>Open the Package Explorer in Domino Designer</li>
		<li>Open the&#160;<b>faces-config.xml</b>&#160;file in the WebContent/WEB-INF folder</li>
		<li>Add the managed bean definition:<br /><br />
		
		<pre>
		&#60;managed-bean id="dBar"&#62;<br />
&#160;&#60;managed-bean-name&#62;dBar&#60;/managed-bean-name&#62;<br />
&#160;&#60;managed-bean-class&#62;eu.linqed.debugtoolbar.DebugToolbar&#60;/managed-bean-class&#62;<br />
&#160;&#60;managed-bean-scope&#62;session&#60;/managed-bean-scope&#62;<br />
&#60;/managed-bean&#62;<br />
</pre>
		</li>
		</ul>
		</p>
		 
		<p style="margin: 10px 0">
			3. Add&#160;<b>ccDebugToolbar</b>&#160;to any XPage you want to use it in. If you have a "layout" custom control you might want to add it to that. 
			The Debug Toolbar custom control has the following properties:
		
		<ul>
			<li><b>defaultCollapsed</b>: show the toolbar collapsed by default?</li>
			<li><b>collapseTo</b>&#160;(left or right): controls where the collapsed toolbar is shown on the screen.</li>
			<li><b>toolbarColor</b>: controls the color of the toolbar.</li>
		</ul>
		</p>
		
		<p>
		You can use the following functions to log messages from SSJS:</p>
		
		<p style="margin-left: 30px">
		<i>dBar.info( msg );<br />
		dBar.warn( msg );<br />
		dBar.error( msg );<br />
		dBar.dump( variable );<br />
		dBar.addDivider();<br />
		</i>
		</p>
		
		<p>You can log messages from Java/ managed beans to the Debug Toolbar using the following methods</p>  

		<p style="margin-left: 30px">
				<i>
					DebugToolbar.get().info( String msg );<br />
					DebugToolbar.get().info( String msg, String msgContext );<br />
					DebugToolbar.get().debug( String msg, String msgContext );<br />
					DebugToolbar.get().debug( String msg );<br />
					DebugToolbar.get().error( String msg );<br />
					DebugToolbar.get().error( String msg, String msgContext );<br />
					DebugToolbar.get().error( Throwable e );<br />
					DebugToolbar.get().warn( String msg );<br />
					DebugToolbar.get().warn( String msg, String msgContext );<br />
					</i>
		</p>
			
		<p><b>Persistent logging in documents</b></p>
					
		<p>The toolbar allows you to log message to the "messages" tab of the toolbar. It also allows you to 
		create documents for (certain levels of) log messages. This is called <b>persistent logging</b>. The persistent
		 logging feature is independent from displaying the toolbar. So it allows you to, say, log warning and error 
		 messages for all users to a database and all message (including debug messages) for a developer to the toolbar.
		</p> 	
		
		<p>To enable the persistent logging you need to add 3 configuration options to the dBar managed bean using managed properties:
		 edit the faces-config.xml file and add the extended managed bean definition:</p>
		 
		 <pre style="margin-left: 30px">
		 &#60;managed-bean id="dBar"&#62;<br />
&#160;&#60;managed-bean-name&#62;dBar&#60;/managed-bean-name&#62;<br />
&#160;&#60;managed-bean-class&#62;eu.linqed.debugtoolbar.DebugToolbar&#60;/managed-bean-class&#62;<br />
&#160;&#60;managed-bean-scope&#62;session&#60;/managed-bean-scope&#62;<br />
 &#160;&#60;managed-property&#62;<br />
      &#160;&#160;&#60;property-name&#62;logDbPath&#60;/property-name&#62;<br />
    &#160; &#160; &#60;value&#62;current&#60;/value&#62;<br />
    &#160;&#60;/managed-property&#62;<br />
   &#160; &#60;managed-property&#62;<br />
     &#160;&#160; &#60;property-name&#62;logEnabled&#60;/property-name&#62;<br />
      &#160;&#160;&#60;value&#62;true&#60;/value&#62;<br />
    &#160;&#60;/managed-property&#62;<br />
    &#160;&#60;managed-property&#62;<br />
      &#160;&#160;&#60;property-name&#62;logLevel&#60;/property-name&#62;<br />
      &#160;&#160;&#60;value&#62;warn&#60;/value&#62;<br />
    &#160;&#60;/managed-property&#62;<br />
    &#60;/managed-bean&#62;<br />	
</pre>

<p>
The configuration options for the persistent logging feature are:<br />
	<table border="1"><tbody>
		<tr><td><b>logEnabled</b></td><td>true or false</td></tr>
		<tr><td><b>logLevel</b></td><td>Determines what message types are logged in the database:<br/>
			<br/>
			debug or all (all messages)<br/>
			info (info, warning and error messages)<br/>
			warn (warning and error messages)<br/>
			error (errors only)<br/>
		</td></tr>
		<tr><td><b>logDbPath</b></td><td>Path to the database were the log messages will be stored. "curent" is also a valid
		value to store the messages in the current database. Examples:<br />
		<br />logs\openLog.nsf</td></tr>
		 
	
	</tbody></table>
</p>

		<p>You can take a look at the faces-config.xml file in the database for this release on OpenNTF for a sample managed bean configuration.</p>
			
	</xp:div>
	
	<xp:div id="pnlNew" style="margin: 10px;">
		<h2>What's new</h2>
		
		<p style="margin-top:15px;">v3.01
		<ul>
		<li>Files tab didn't work in Domino 9 due to updated Dojo version</li>
		<li>Renamed messages repeat variable</li>
		<li>Added selection formula to Events view</li>
		<li>Updated return message in Inspector when 'null' is returned</li>
		<li>Added project links to About tab</li>
		</ul>
		</p>
		
		<p style="margin-top:15px;">
			v3.0
			<ul>
	<li>
		<p>New: read server log files</p>
	</li>
	<li>
		<p>Redesigned Inspector:</p>

		<ul>
			<li>removed debug toolbar components from component selection list</li>
			<li>executing a statement now does a full refresh, so you can instantly see the effect
				(try a btn.setDisabled(true) for instance!)</li>
			<li>changed sort order for component ids: ids starting with a _ moved done</li>
			<li>layout changes: click on methods to execute them, classes to open the documentation site</li>
		</ul>
	</li>
	<li>
		<p>New: external/ persistent logging</p>

		<ul>
			<li>Stores messages written to the toolbar in documents in a database, (optional) including messages thrown by the XPages runtime in an error page.</li>
			<li>Settings managed through dBar bean managed bean properties:
				logDbPath current or (for example) logs\logdb.nsf
				logEnabled true/ false (defaults to false)
				logLevel error, warn, info, debug determines message types that are logged, will include all previous
				log types</li>
			<li>All users that need to be able to log something to the log databse need to have (at least)
				depositor access. If they also need to be able to read log documents, give them Author access
				with the Create documents option.</li>
		</ul>
	</li>
	<li>Layout changes
	

		<ul>
			<li>simplified CSS (i.e. CSS3 selectors for zebra tables)</li>
			<li>better compatibility with Bootstrap/ JQM</li>
		</ul>
	</li>
	<li>
		<p>Removed "Timers" tab</p>

		<ul>
			<li>startTimer() en stopTimer() are now deprecated (replaced by debug() calls)</li>
		</ul>
	</li>
	<li>
		<p>New options in Messages tab: detailed timings</p>

		<ul>
			<li>shows milliseconds for every log message</li>
		</ul>
	</li>
</ul>
		</p>
		
		<p style="margin-top:15px;">
			v2.01
			<ul>
				<li>Bug fixes and documentation updates</li>
			</ul>
		</p>
		
		<p style="margin-top:15px;">
			v2.0
			<ul>
				<li>Debug Toolbar now uses a managed bean (and still a little SSJS).</li>
				<li>Added the option to remove a (scoped) variable.</li>
				<li>Added the option to inspect any scoped variable using the API Inspector (Tip: very handy for beans!)</li>
				<li>When logging an error using dBar.error(), a stacktrace can be included that can be shown in the Messages tab</li>
				<li>Added an error page: include it in a database (and set it in the application properties) to log errors to the debug toolbar.</li>
				<li>The toolbar now shows the Java heap size.</li>
				<li>"importlist.xml" file updated for the OpenNTF import/export tool</li>
				<li>Option added to change the color of the toolbar.</li>
				<li>Icons added for the toolbar custom control</li>
			</ul>
		</p>
		
		<p style="margin-top:15px;">
			v1.3
			<ul>
				<li>Removed Extension Library dependancy: not required anymore to use the Java logging functions.</li>
				<li>Java class: combined all code into a single class: com.debug.DebugToolbar.</li>
				<li>Java class: added new constructor to set the message context and added functions to use that default context.</li>
				<li>Added option to add a divider to the list of messages.</li>
				<li>Timers aren't automatically stopped anymore.</li>
				<li>Updated demo page.</li>
			</ul>
		</p>
		

		<p style="margin-top:15px;">
			v1.2.2
			<ul>
				<li>Bug fix: server console showing "Error while logging: sessionScope.get() is null".</li>
				<li>New custom control property: collapseTo to set where the collapse the toolbar (left or right of the screen).</li>
				<li>Renamed toolbar's custom control property "defaultHidden" to "defaultCollapsed" and added a better description.</li>
				<li>Added more custom variables and changed the layout of that tab.</li>
			</ul>
		</p>

		<p style="margin-top:15px;">
			v1.2.1
			<ul>
				<li>Bug fix: reload interval for the external console window was computed incorrect.</li>
				<li>License info in the NOTICE file updated.</li>
			</ul>
		</p>

		<p style="margin-top:15px;">
			v1.2
			<ul>
				<li>
					Java classes created to use the debug toolbar's messsage/ logging function from Java beans. Classes
					were written by&#160;
					<a href="http://xprentice.gbs.com" target="_blank">Keith Strickland</a>&#160;
					(and modified by Mark). Requires the following libary:
					<ul>
						<li>com.debug.DebugToolbar</li>
					</ul>
				</li>
			</ul>
		</p>

		<p>
			v1.1
			<ul>
				<li>Bug fixed in getting the path to the detached messages window.</li>
				<li>
					New method added: dBar.dump( anyObject ); to dump the contents of an object to the messages tab.
				</li>
				<li>Added a couple of variables to the custom variables tab.</li>
			</ul>
		</p>

		<p>
			v1.0
			<ul>
				<li>Initial release</li>
			</ul>
		</p>
	</xp:div>

</xp:view>
